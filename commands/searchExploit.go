package commands

import (
	"context"
	"flag"
	"os"
	"fmt"
	"regexp"

	"github.com/google/subcommands"
	"github.com/inconshreveable/log15"
	c "github.com/mozqnet/go-exploitdb/config"
	"github.com/mozqnet/go-exploitdb/db"
	"github.com/mozqnet/go-exploitdb/models"
	"github.com/mozqnet/go-exploitdb/util"
)

type SearchExploitCmd struct {
	Debug		bool
	DebugSQL	bool
	Quiet		bool
	LogDir		string
	LogJSON		bool
	DBPath		string
	DBType		string
	HTTPProxy	string
	SearchType	string
	SearchParam	string
}

func (*SearchExploitCmd) Name() string { return "searchExploit" }

func (*SearchExploitCmd) Synopsis() string { return "search Exploit from go-exploitdb." }

func (*SearchExploitCmd) Usage() string {
	return `searchExploit:
	searchExploit
		[-dbtype=sqlite3|mysql|postgres]
		[-dbpath=$PWD/exploitdb.sqlite3 or connection string]
		[-http-proxy=http://192.168.0.1:8080]
		[-debug]
		[-debug-sql]
		[-quiet]
		[-log-dir=/path/to/log]
		[-log-json]
		[-stype]
		[-sparam]

  Command:
	$ go-exploitdb searchExploit -stype [All/CVE/EDB-ID] -sparam [xxxx-xxxx/xxxx]
	
  ex.
  [*] If you want to search All Exploits
	$ go-exploitdb searchExploit -stype All

  [*] If you want to search Exploit by CVE
	$ go-exploitdb searchExploit -stype CVE -sparam xxxx-xxxx

  [*] If you want to search Exploit by EDB-ID
	$ go-exploitdb searchExploit -stype EDB -sparam xxxx

`
}

func (p *SearchExploitCmd) SetFlags(f *flag.FlagSet) {
	f.BoolVar(&p.Debug, "debug", false, "debug mode")
	f.BoolVar(&p.DebugSQL, "debug-sql", false, "SQL debug mode")
	f.BoolVar(&p.Quiet, "quiet", false, "quiet mode (no output)")
	defaultLogDir := util.GetDefaultLogDir()
	f.StringVar(&p.LogDir, "log-dir", defaultLogDir, "/path/to/log")
	f.BoolVar(&p.LogJSON, "log-json", false, "output log as JSON")

	pwd := os.Getenv("PWD")
	f.StringVar(&p.DBPath, "dbpath", pwd+"/go-exploitdb.sqlite3",
		"/path/to/sqlite3 or SQL connection string")

	f.StringVar(&p.DBType, "dbtype", "sqlite3",
		"Database type to store data in (sqlite3, mysql, postgres or redis supported)")

	f.StringVar(
		&p.HTTPProxy,
		"http-proxy",
		"",
		"http://proxy-url:port (default: empty)",
	)

	f.StringVar(
		&p.SearchType,
		"stype",
		"All",
		"All Exploits: All  |  by CVE: CVE  |  by EDB-ID: EDB  (default: All)",
	)

	f.StringVar(
		&p.SearchParam,
		"sparam",
		"",
		"All Exploits: None  |  by CVE: [xxxx-xxxx]  |  by Edb-ID: [xxxx]  (default: None)",
	)
}

func (p *SearchExploitCmd) Execute(_ context.Context, f *flag.FlagSet, _ ...interface{}) subcommands.ExitStatus {
	c.CommonConf.Quiet = p.Quiet
	c.CommonConf.DebugSQL = p.DebugSQL
	c.CommonConf.DBPath = p.DBPath
	c.CommonConf.DBType = p.DBType
	c.CommonConf.HTTPProxy = p.HTTPProxy
	c.SearchConf.SearchType = p.SearchType
	c.SearchConf.SearchParam = p.SearchParam

	util.SetLogger(p.LogDir, c.CommonConf.Quiet, c.CommonConf.Debug, p.LogJSON)
	if !c.CommonConf.Validate() {
		return subcommands.ExitUsageError
	}

	driver, locked, err := db.NewDB(c.CommonConf.DBType, c.CommonConf.DBPath, c.CommonConf.DebugSQL)
	if err != nil {
		if locked {
			log15.Error("Failed to Open DB. Close DB connection", "err", err)
		}
		return subcommands.ExitFailure
	}
	
	stype := c.SearchConf.SearchType
	param := c.SearchConf.SearchParam

	var result = []models.Exploit{}
	if stype == "All" {
		if param != "" {
			log15.Error("A SearchType [All] does not require parameters")
			return subcommands.ExitFailure
		}
		result = driver.GetExploitAll()
	} else if stype == "CVE" {
		r := regexp.MustCompile(`^(\d{1,}-\d{1,})`)
		if !r.Match([]byte(param)) {
			log15.Error("Specify the search type [CVE] parameters in the format [xxxx-xxxx].")
                        return subcommands.ExitFailure
		}
		result = driver.GetExploitByCve(param)
	} else if stype == "EDB" {
		r := regexp.MustCompile(`^(\d{1,})`)
		if !r.MatchString(param) {
			log15.Error("Specify the search type [EDB] parameters in the format [xxxx].")
                        return subcommands.ExitFailure
		}
		result = driver.GetExploitByEdbId(param)
	} else {
		log15.Error("Specify the search type [ All / CVE / EDB ].")
		return subcommands.ExitFailure
	}
	fmt.Println("")
	fmt.Println("Results: ")
	fmt.Println("---------------------------------------")
	for _, r := range result {
		fmt.Println("\n[*]CVE-ExploitID Reference:")
		fmt.Printf("  CVE: %s\n  EDB-ID: %s\n", r.Cve, r.EdbId)
		fmt.Println("\n[*]Exploit Info: ")
		fmt.Printf("  Exploit Title: %s\n", r.Title)
		fmt.Printf("  URL: %s\n", r.Url)
		fmt.Printf("  Path: %s\n", r.Path)
		fmt.Printf("  File Type: %s\n", r.Filetype)
		fmt.Println("\n[*]Exploit Code  or  Proof of Concept:")
		fmt.Printf("%s\n", r.CodeOrPoc)
		fmt.Println("---------------------------------------")
	}

	return subcommands.ExitSuccess
}
