package db

import (
	"fmt"
	"github.com/mozqnet/go-exploitdb/models"
	"github.com/jinzhu/gorm"
	"github.com/inconshreveable/log15"
)

const (
	dialectSqlite3    = "sqlite3"
	dialectMysql      = "mysql"
	dialectPostgreSQL = "postgres"
)

type DB interface {
	Name() string
	OpenDB(dbType, dbPath string, debugSQL bool) (bool, error)
	MigrateDB() error
	GetExploitByEdbId(string) []models.Exploit
	GetExploitByCve(string) []models.Exploit
	GetExploitAll() []models.Exploit
	DeleteAndInsertExploit(*gorm.DB, models.Exploit) error
	InsertExploit([]models.Exploit) error
}

func NewDB(dbType string, dbPath string, debugSQL bool) (driver DB, locked bool, err error) {
	if driver, err = newDB(dbType); err != nil {
		log15.Error("Failed to new db.", "err", err)
		return driver, false, err
	}

	log15.Info("Opening Database.", "db", driver.Name())
	if locked, err := driver.OpenDB(dbType, dbPath, debugSQL); err != nil {
		if locked {
			return nil, true, err
		}
		return nil, false, err
	}

	log15.Info("Migrating DB.", "db", driver.Name())
	if err := driver.MigrateDB(); err != nil {
		log15.Error("Failed to migrate db.", "err", err)
		return driver, false, err
	}
	return driver, false, nil
}

func newDB(dbType string) (DB, error) {
	switch dbType {
	case DialectSqlite3, DialectMysql, DialectPostgreSQL:
		return &Driver{name: dbType}, nil
	}
	return nil, fmt.Errorf("Invalid database dialect, %s", dbType)
}
