package db

import (
	"fmt"

	"github.com/jinzhu/gorm"
	sqlite3 "github.com/mattn/go-sqlite3"

	_ "github.com/jinzhu/gorm/dialects/mysql"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
	"github.com/mozqnet/go-exploitdb/models"
)

const (
	DialectSqlite3    = "sqlite3"
	DialectMysql      = "mysql"
	DialectPostgreSQL = "postgres"
)

type Driver struct {
	name   string
	conn   *gorm.DB
}


func (d *Driver) Name() string {
	return d.name
}

func (d *Driver) OpenDB(dbType, dbPath string, debugSQL bool) (locked bool, err error) {
	d.conn, err = gorm.Open(dbType, dbPath)
	if err != nil {
		msg := fmt.Sprintf("Failed to open DB. dbtype: %s, dbpath: %s, err: %s", dbType, dbPath, err)
		if d.name == dialectSqlite3 {
			switch err.(sqlite3.Error).Code {
			case sqlite3.ErrLocked, sqlite3.ErrBusy:
				return true, fmt.Errorf(msg)
			}
		}
		return false, fmt.Errorf(msg)
	}
	d.conn.LogMode(debugSQL)
	if d.name == dialectSqlite3 {
		d.conn.Exec("PRAGMA foreign_keys = ON")
	}
	return false, nil
}

func (d *Driver) MigrateDB() error {
	if err := d.conn.AutoMigrate(
		&models.Exploit{},
	).Error; err != nil {
		return fmt.Errorf("Failed to migrate. err: %s", err)
	}

	return nil
}
