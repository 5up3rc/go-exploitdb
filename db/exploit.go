package db

import (
	"fmt"

	"github.com/inconshreveable/log15"
	"github.com/jinzhu/gorm"
	"github.com/mozqnet/go-exploitdb/models"
	pb "gopkg.in/cheggaaa/pb.v1"
)

func (d *Driver) InsertExploit(exploits []models.Exploit) (err error) {
	log15.Info(fmt.Sprintf("Inserting %d Exploits", len(exploits)))
	progress_bar := pb.StartNew(len(exploits))

	for _, exploit := range exploits {
		if err := d.DeleteAndInsertExploit(d.conn, exploit); err != nil {
			return fmt.Errorf("Failed to Insert Exploit. Exploit: %s, err: %s",
				exploit.EdbId, err)
		}
		progress_bar.Increment()
	}
	progress_bar.Finish()
	return nil
}

func (d *Driver) DeleteAndInsertExploit(conn *gorm.DB, exploit models.Exploit) (err error) {
	tx := conn.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		tx.Commit()
	}()

	old_exploit := models.Exploit{}
	result := tx.Where(&models.Exploit{Cve: exploit.Cve}).First(&old_exploit)
	if !result.RecordNotFound() {
		exploit.ID = old_exploit.ID
		var errs gorm.Errors
		errs = errs.Add(tx.Unscoped().Delete(&old_exploit).Error)
		
		var new []error
		for _, err := range errs {
			if err != nil {
				new = append(new, err)
			}
		}
		errs = new

		if len(errs.GetErrors()) > 0 {
			return fmt.Errorf("Failed to save records. Exploit: %s, err: %s", exploit.EdbId, errs.Error())
		}
	}
	if err = tx.Create(&exploit).Error; err != nil {
		return err
	}
	return nil
}

func (d *Driver) GetExploitByCve(cve string) ([]models.Exploit) {
	results := []models.Exploit{}

	err := d.conn.Table("Exploits").Select("*").
		Where(&models.Exploit {
			Cve: cve,
		}).
		Scan(&results).Error
	
	if err != nil && err != gorm.ErrRecordNotFound {
		log15.Error("Failed to get Exploits by CVE", "err", err)
	}
	return results
}

func (d *Driver) GetExploitByEdbId(edbid string) ([]models.Exploit) {
        results := []models.Exploit{}

        err := d.conn.Table("Exploits").Select("*").
                Where(&models.Exploit {
                        EdbId: edbid,
                }).
                Scan(&results).Error

        if err != nil && err != gorm.ErrRecordNotFound {
                log15.Error("Failed to get Exploits by EdbId", "err", err)
        }
        return results
}

func (d *Driver) GetExploitAll() ([]models.Exploit) {
	results := []models.Exploit{}

	err := d.conn.Table("Exploits").Select("*").Scan(&results).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		log15.Error("Failed to get all Exploits", "err", err)
	}
	return results
}
