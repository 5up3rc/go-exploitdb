package models

import (
	"strings"
	"os"
	"os/exec"
	"path/filepath"
	"errors"
	"fmt"
	"regexp"
	"github.com/inconshreveable/log15"
	pb "gopkg.in/cheggaaa/pb.v1"
)

type Exploit struct {
	ID uint `gorm:"primary_key"`
	Cve string
	EdbId string
	Title string
	Url string
	Path string
	Filetype string
	CodeOrPoc string
}

type EdbIdCve struct {
  EdbId string
  Cve string
}

func ConvertToExploitModel(edbid_cves []EdbIdCve) ([]Exploit, error) {
	var e Exploit
	var results []Exploit
	for _, edbid_cve := range edbid_cves {
		cves := strings.Split(edbid_cve.Cve, " ")
		for _, cve := range cves {
			e.Cve = cve
			e.EdbId = edbid_cve.EdbId
			results = append(results, e)
		}
	}
	return results, nil
}

func SetExploitCodeToExploitModel(exploits []Exploit) ([]Exploit, error) {
	var results []Exploit

	progress_bar := pb.StartNew(len(exploits))

	for _, exploit := range exploits {
		pwd := os.Getenv("PWD")
		cmd_path := filepath.Join(pwd, "exploit-database/searchsploit")
		cmd_param := fmt.Sprintf("%s -p %s", cmd_path, exploit.EdbId)
                out, err := exec.Command("sh", "-c", cmd_param).Output()
		if err != nil {
        		log15.Error("searchsploit run error.", "err", err)
			return nil, err
		} else {
			s := string(out[:len(out)])
			r_title := regexp.MustCompile(`Exploit: (.+)`)
			title := r_title.FindString(s)
			title = strings.Replace(title, "Exploit: ", "", -1)
			exploit.Title = title

			r_url := regexp.MustCompile(`URL: (.+)`)
			url := r_url.FindString(s)
			url = strings.Replace(url, "URL: ", "", -1)
			exploit.Url = url

		        r_path := regexp.MustCompile(`Path: ([\w+\-*\/]+\w+\.*\w*)`)
			path := r_path.FindString(s)
			path = strings.Replace(path, "Path: ", "", -1)
			exploit.Path = path

			r_filetype := regexp.MustCompile(`File Type: (.+)`)
			filetype := r_filetype.FindString(s)
			filetype = strings.Replace(filetype, "File Type: ", "", -1)
			exploit.Filetype = filetype

			less_out, err := exec.Command("less", path).Output()
			if err != nil {
				log15.Error("Couldn't read ExploitCode or PoC file.")
				return nil, errors.New("Couldn't read ExploitCode or PoC file.")
			}
	        	exploit.CodeOrPoc = string(less_out[:len(less_out)])
		}
		results = append(results, exploit)
		progress_bar.Increment()
	}
	progress_bar.Finish()
	return results, nil
}
